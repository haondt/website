version: '3'

services:
        frontend:
                build:
                        context: ./frontend
                working_dir: /code
                volumes:
                        - ./frontend/frontend/src:/code/src/
                        - ./frontend/config.json:/code/src/config.json
                stdin_open: true # docker run -i
                tty: true # docker run -t
                networks:
                        - frontend_network
        backend:
                build:
                        context: ./backend
                working_dir: /code
                command: python3 app.py
                volumes:
                        - ./backend/flask:/code
                        - /projects
                networks:
                        - backend_network
                depends_on:
                        - db
        db:
                image: mysql:5.7
                environment:
                        MYSQL_DATABASE: 'my-app-db'
                        MYSQL_ROOT_PASSWORD: 'password'
                networks:
                        - backend_network
        nginx:
                image: nginx:alpine
                ports:
                        - "80:80"
                        - "443:443"
                depends_on:
                        - backend
                        - frontend
                volumes:
                        - ./nginx/prod.conf:/etc/nginx/nginx.conf:ro
                        - ./certbot/conf:/etc/letsencrypt
                        - ./certbot/www:/var/www/certbot
                networks:
                        - backend_network
                        - frontend_network
                command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
        certbot:
                image: certbot/certbot
                volumes:
                        - ./certbot/conf:/etc/letsencrypt
                        - ./certbot/www:/var/www/certbot
                entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
        backend_network:
                driver: bridge
        frontend_network:
                driver: bridge



